{"version":3,"sources":["logo.svg","components/card.jsx","components/card-list.jsx","components/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","cardStyle","border","marginRight","height","maxWidth","minWidth","padding","verticalAlign","display","flexDirection","justifyContent","boxSizing","Card","props","style","alt","src","monster","id","name","cardListStyle","flexWrap","alignItems","alignContent","alignSelf","cardRowStyle","flex","margin","CardList","console","log","monsters","map","key","SearchBox","type","placeholder","onChange","e","target","value","appStyle","h1Style","fontFamily","fontSize","color","App","state","searchString","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,4ICErCC,EAAY,CACdC,OAAQ,kBACRC,YAAa,OACbC,OAAQ,QACRC,SAAU,QACVC,SAAU,QACVC,QAAS,OACTC,cAAe,SACfC,QAAS,OACTC,cAAe,SACfC,eAAgB,aAChBC,UAAW,cAGFC,EAAO,SAAAC,GAAK,OACrB,yBAAKC,MAAK,eAAMd,EAAN,GAAoBa,EAAMC,QAChC,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,4BAAKL,EAAMI,QAAQE,QChBrBC,EAAgB,CAClBZ,QAAS,OACTa,SAAU,OACVX,eAAgB,SAChBY,WAAY,aACZC,aAAc,gBACdC,UAAW,UAGTC,EAAe,CACjBC,KAAM,UACNC,OAAQ,QAGCC,EAAW,SAAAf,GAGpB,OAFAgB,QAAQC,IAAIjB,GAGR,yBAAKC,MAAOM,GACPP,EAAMkB,SAASC,KAAI,SAAAf,GAAO,OACvB,kBAAC,EAAD,CAAMH,MAAOW,EAAcR,QAASA,EAASgB,IAAKhB,EAAQC,UCrB7DgB,EAAY,SAAArB,GAAK,OAC1B,2BACIsB,KAAK,SACLC,YAAavB,EAAMuB,YACnBC,SACA,SAAAC,GAAC,OAAIzB,EAAMwB,SAASC,EAAEC,OAAOC,WCD/BC,G,YAAW,CACfjC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBY,WAAY,WAGRoB,EAAU,CACdC,WAAY,gBACZC,SAAU,OACVC,MAAO,WAyCMC,E,YApCb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXhB,SAAU,GACViB,aAAc,IALJ,E,iFAUO,IAAD,OAClBC,MAAM,8CAA8CC,MAClD,SAAAC,GAAQ,OAAIA,EAASC,OAAOF,MAC1B,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACvB,SAAUsB,Y,+BAK9B,IAAD,SACyBE,KAAKR,MAAhChB,EADE,EACFA,SAAUiB,EADR,EACQA,aACTQ,EAAmBzB,EAAS0B,QAAO,SAAAxC,GAAO,OAAIA,EAAQE,KAAKuC,cAAcC,SAASX,EAAaU,kBAErG,OACE,yBAAKE,UAAU,MAAM9C,MAAO2B,GAC1B,wBAAI3B,MAAO4B,GAAX,oBACA,kBAAC,EAAD,CACEN,YAAY,kBACZC,SACE,SAAAC,GAAC,OAAI,EAAKgB,SAAS,CAACN,aAAcV,OAEtC,kBAAC,EAAD,CAAUP,SAAUyB,S,GAhCVK,aCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.a48c278c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst cardStyle = {\r\n    border: \"1px solid black\",\r\n    marginRight: \"-1px\",\r\n    height: \"350px\",\r\n    maxWidth: \"250px\",\r\n    minWidth: \"200px\",\r\n    padding: \"20px\",\r\n    verticalAlign: \"middle\",\r\n    display: \"flex\",\r\n    flexDirection: 'column',\r\n    justifyContent: 'flex-start',\r\n    boxSizing: 'border-box'\r\n};\r\n\r\nexport const Card = props => (\r\n    <div style={{...cardStyle, ...props.style}}>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h1>{props.monster.name}</h1>\r\n    </div>\r\n)","import React from 'react';\r\nimport {Card} from './card.jsx'\r\n\r\nconst cardListStyle = {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n    alignItems: 'flex-start',\r\n    alignContent: 'space-between',\r\n    alignSelf: 'center'\r\n};\r\n\r\nconst cardRowStyle = {\r\n    flex: '0 0 20%',\r\n    margin: '20px'\r\n};\r\n\r\nexport const CardList = props => {\r\n    console.log(props);\r\n\r\n    return (\r\n        <div style={cardListStyle}>\r\n            {props.monsters.map(monster =>\r\n                <Card style={cardRowStyle} monster={monster} key={monster.id}/>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\"\r\n\r\nexport const SearchBox = props => (\r\n    <input\r\n        type='search'\r\n        placeholder={props.placeholder}\r\n        onChange={\r\n        e => props.onChange(e.target.value)\r\n    }/>\r\n)","import  React, { Component } from 'react';\nimport { CardList } from './components/card-list.jsx'\nimport { SearchBox } from './components/search-box.jsx'\nimport logo from './logo.svg';\nimport './App.css';\n\nconst appStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  alignItems: 'center'\n};\n\nconst h1Style = {\n  fontFamily: 'Bigelow Rules',\n  fontSize: \"72px\",\n  color: \"#0ccac4\"\n}\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchString: '',\n    };\n\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(\n      response => response.json().then(\n        users => this.setState({monsters: users})\n      )\n    )\n  }\n\n  render() {\n    var {monsters, searchString } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchString.toLowerCase()));\n\n    return (\n      <div className=\"App\" style={appStyle}>\n        <h1 style={h1Style}>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='search monsters'\n          onChange={\n            e => this.setState({searchString: e})\n          }/>\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}